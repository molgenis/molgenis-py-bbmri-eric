# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

parameters:
  release:
    type: boolean
    default: true
  release_scope:
    type: string
    default: patch

executors:
  my-executor:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo

jobs:
  run_tests:
    executor: my-executor
    steps:
      - checkout
      - run: echo << pipeline.parameters.release >>
      - run:
          name: Run tests
          command: |
            pip install tox
            tox
      - run:
          name: Install and run pre-commit
          command: |
            pip install pre-commit
            pre-commit install
            pre-commit run --all-files
      - run:
          name: sonar
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              echo "SONAR FOR PR"
            else
              echo "SONAR FOR MAIN"
            fi
          # Iets met sonar voor PR:
          # "sonar-scanner -Dsonar.github.oauth=${env.GITHUB_TOKEN} -Dsonar.pullrequest.base=${CHANGE_TARGET} -Dsonar.pullrequest.branch=${BRANCH_NAME} -Dsonar.pullrequest.key=${env.CHANGE_ID} -Dsonar.pullrequest.provider=GitHub -Dsonar.pullrequest.github.repository=molgenis/molgenis-py-bbmri-eric"
            # voor main:
          # "sonar-scanner"
  release2testpypi:
    executor: my-executor
    steps:
      - checkout
      - run:
          name: Setup git
          command: |
            git config user.email "d.t.roelofs-prins@umcg.nl"
            git config user.name "dtroelofsprins"
      - run: pip install tox
      - run: echo $GITHUB_TOKEN
      - run: git remote set-url origin https://${GITHUB_TOKEN}@github.com/molgenis/molgenis-py-bbmri-eric.git
      - run: git checkout -f main
      - run: git fetch --tags
      - run:
          name: Bump the version based on the last tag and create a new tag
          command: |
            echo release scope is << pipeline.parameters.release_scope >>
            echo 'export RELEASE_SCOPE=<< pipeline.parameters.release_scope >>' >> "$BASH_ENV"
            pip install bumpversion
            NEW_PACKAGE_VERSION=$(bash bump-version.sh)
            echo 'export NEW_PACKAGE_VERSION' >> "$BASH_ENV"
            echo new version is $NEW_PACKAGE_VERSION
      - run: git checkout .
      - run: # build and publish the release
          command: |
            tox -e build
            tox -e publish -- --skip-existing --repository testpypi --username ${TESTPYPI_USERNAME} --password ${TESTPYPI_TOKEN}
      - run: mkdir -p workspace
      - run: cp $BASH_ENV workspace/bash.env
      - persist_to_workspace:
          root: ~/repo
          paths:
            -  .
            -  workspace/bash.env
          # Voor testen even --skip-existing toegevoegd
          # push the new tag to molgenis/molgenis-py-bbmri-eric
          # Maar voor testen even nog niet
      # - run: git push --tags origin main
  release2pypi:
    executor: my-executor
    steps:
      - checkout
      - run: pip install tox
      - attach_workspace:
          at: ~/repo
      # do the actual release to PyPi
      # - run: tox -e publish -- --repository pypi --username ${PYPI_USERNAME} --password ${PYPI_TOKEN}
      - run: ls -l
      - run: cat workspace/bash.env
      - run: cat workspace/bash.env >> $BASH_ENV
      - run:
          command: |
            echo $NEW_PACKAGE_VERSION
            TEST=$NEW_PACKAGE_VERSION
            echo $TEST
      - run: echo in release new version is $NEW_PACKAGE_VERSION
      - run: tox -e publish -- --skip-existing --repository testpypi --username ${TESTPYPI_USERNAME} --password ${TESTPYPI_TOKEN}
 #     - run:
 #         name: message slack about the release
 #         command: |
 #           curl -d "token=${SLACK_TOKEN}" \
 #           -d "text=TEST-TEST-TEST-molgenis-py-bbmri-eric ${NEW_PACKAGE_VERSION} is released. Check it out: https://pypi.org/project/molgenis-py-bbmri-eric/" \
 #           -d "channel=C01TN8FU480" \
 #           -X POST https://slack.com/api/chat.postMessage


workflows:
  build_and_test:
    when:
      and:
        - not: << pipeline.parameters.release >>
    jobs:
      - run_tests
  release:
    when: << pipeline.parameters.release >>
    jobs:
      - run_tests
      - release2testpypi:
          requires:
            - run_tests
          filters:
            branches:
              only: circleci-project-setup # moet zijn main (master?), maar voor testen ff zo
      - release2pypi?:
          type: approval
          requires:
            - run_tests
            - release2testpypi
          filters:
            branches:
              only: circleci-project-setup # moet zijn main (of master), maar voor testen ff zo
      - release2pypi:
          requires:
            - run_tests
            - release2testpypi
            - release2pypi?
          filters:
            branches:
              only: circleci-project-setup
